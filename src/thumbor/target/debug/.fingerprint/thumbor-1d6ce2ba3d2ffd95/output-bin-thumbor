{"message":"unused import: `serde::Deserialize`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/main.rs","byte_start":113,"byte_end":131,"line_start":3,"line_end":3,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":109,"byte_end":132,"line_start":3,"line_end":3,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use serde::Deserialize;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `serde::Deserialize`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse serde::Deserialize;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused imports: `alphabet`, `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/pb/mod.rs","byte_start":85,"byte_end":93,"line_start":7,"line_end":7,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    alphabet,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/pb/mod.rs","byte_start":108,"byte_end":112,"line_start":8,"line_end":8,"column_start":14,"column_end":18,"is_primary":true,"text":[{"text":"    engine::{self, general_purpose},","highlight_start":14,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/pb/mod.rs","byte_start":85,"byte_end":99,"line_start":7,"line_end":8,"column_start":5,"column_end":5,"is_primary":true,"text":[{"text":"    alphabet,","highlight_start":5,"highlight_end":14},{"text":"    engine::{self, general_purpose},","highlight_start":1,"highlight_end":5}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/pb/mod.rs","byte_start":108,"byte_end":114,"line_start":8,"line_end":8,"column_start":14,"column_end":20,"is_primary":true,"text":[{"text":"    engine::{self, general_purpose},","highlight_start":14,"highlight_end":20}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `alphabet`, `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/pb/mod.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    alphabet,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    engine::{self, general_purpose},\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"message":"the trait bound `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}: Handler<_, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":407,"byte_end":415,"line_start":19,"line_end":19,"column_start":59,"column_end":67,"is_primary":true,"text":[{"text":"    let app = Router::new().route(\"/image/:spec/url\", get(generate));","highlight_start":59,"highlight_end":67}],"label":"the trait `Handler<_, _>` is not implemented for fn item `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":403,"byte_end":406,"line_start":19,"line_end":19,"column_start":55,"column_end":58,"is_primary":false,"text":[{"text":"    let app = Router::new().route(\"/image/:spec/url\", get(generate));","highlight_start":55,"highlight_end":58}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Handler<ReqBody, T>` is implemented for `axum::handler::Layered<S, T>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `axum::handler::get`","code":null,"level":"note","spans":[{"file_name":"/Users/qinjianquan/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/axum-0.2.8/src/handler/mod.rs","byte_start":2698,"byte_end":2711,"line_start":116,"line_end":116,"column_start":8,"column_end":21,"is_primary":true,"text":[{"text":"    H: Handler<B, T>,","highlight_start":8,"highlight_end":21}],"label":"required by this bound in `get`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}: Handler<_, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:19:59\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let app = Router::new().route(\"/image/:spec/url\", get(generate));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Handler<_, _>` is not implemented for fn item `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Handler<ReqBody, T>` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1maxum::handler::Layered<S, T>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `axum::handler::get`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/qinjianquan/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/axum-0.2.8/src/handler/mod.rs:116:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    H: Handler<B, T>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `get`\u001b[0m\n\n"}
{"message":"the trait bound `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}: Handler<axum::body::Body, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":625,"byte_end":630,"line_start":29,"line_end":29,"column_start":10,"column_end":15,"is_primary":true,"text":[{"text":"        .serve(app.into_make_service())","highlight_start":10,"highlight_end":15}],"label":"the trait `Handler<axum::body::Body, _>` is not implemented for fn item `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Handler<ReqBody, T>` is implemented for `axum::handler::Layered<S, T>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, ...>` to implement `tower_service::Service<Request<axum::body::Body>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-11412338820646073811.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Route<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, ...>> {generate}, ..., ..., ...>, ...>` to implement `tower_service::Service<Request<axum::body::Body>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-15947097946901516418.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Route<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, ...>> {generate}, ..., ..., ...>, ...>` to implement `hyper::service::http::HttpService<axum::body::Body>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-15947097946901516418.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `IntoMakeService<Route<OnMethod<fn(Path<Params>) -> impl Future<Output = ...> {generate}, ..., ..., ...>, ...>>` to implement `hyper::service::make::MakeServiceRef<hyper::server::tcp::addr_stream::AddrStream, axum::body::Body>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-13000626417059692334.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}: Handler<axum::body::Body, _>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:10\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .serve(app.into_make_service())\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Handler<axum::body::Body, _>` is not implemented for fn item `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Handler<ReqBody, T>` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1maxum::handler::Layered<S, T>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, ...>` to implement `tower_service::Service<Request<axum::body::Body>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-11412338820646073811.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Route<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, ...>> {generate}, ..., ..., ...>, ...>` to implement `tower_service::Service<Request<axum::body::Body>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-15947097946901516418.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Route<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, ...>> {generate}, ..., ..., ...>, ...>` to implement `hyper::service::http::HttpService<axum::body::Body>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-15947097946901516418.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `IntoMakeService<Route<OnMethod<fn(Path<Params>) -> impl Future<Output = ...> {generate}, ..., ..., ...>, ...>>` to implement `hyper::service::make::MakeServiceRef<hyper::server::tcp::addr_stream::AddrStream, axum::body::Body>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-13000626417059692334.txt'\u001b[0m\n\n"}
{"message":"the trait bound `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}: Handler<axum::body::Body, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":631,"byte_end":654,"line_start":29,"line_end":29,"column_start":16,"column_end":39,"is_primary":true,"text":[{"text":"        .serve(app.into_make_service())","highlight_start":16,"highlight_end":39}],"label":"the trait `Handler<axum::body::Body, _>` is not implemented for fn item `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/main.rs","byte_start":625,"byte_end":630,"line_start":29,"line_end":29,"column_start":10,"column_end":15,"is_primary":false,"text":[{"text":"        .serve(app.into_make_service())","highlight_start":10,"highlight_end":15}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the trait `Handler<ReqBody, T>` is implemented for `axum::handler::Layered<S, T>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, ...>` to implement `tower_service::Service<Request<axum::body::Body>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-11412338820646073811.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `State<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, Request<Body>>`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `Oneshot<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, Request<Body>>`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `RouteFutureInner<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, EmptyRouter, Body>`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `RouteFuture<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, EmptyRouter, Body>`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `H2StreamState<RouteFuture<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, EmptyRouter, Body>, BoxBody<Bytes, Error>>`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it appears within the type `H2Stream<RouteFuture<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, EmptyRouter, Body>, BoxBody<Bytes, Error>>`","code":null,"level":"note","spans":[{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `hyper::common::exec::Exec` to implement `hyper::common::exec::ConnStreamExec<RouteFuture<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter, axum::body::Body>, http_body::combinators::box_body::BoxBody<axum::body::Bytes, axum::Error>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `hyper::server::server::Builder::<I, E>::serve`","code":null,"level":"note","spans":[{"file_name":"/Users/qinjianquan/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/hyper-0.14.24/src/server/server.rs","byte_start":19260,"byte_end":19320,"line_start":558,"line_end":558,"column_start":12,"column_end":72,"is_primary":true,"text":[{"text":"        E: ConnStreamExec<<S::Service as HttpService<Body>>::Future, B>,","highlight_start":12,"highlight_end":72}],"label":"required by this bound in `Builder::<I, E>::serve`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}: Handler<axum::body::Body, _>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:29:16\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .serve(app.into_make_service())\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Handler<axum::body::Body, _>` is not implemented for fn item `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Handler<ReqBody, T>` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1maxum::handler::Layered<S, T>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, ...>` to implement `tower_service::Service<Request<axum::body::Body>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-11412338820646073811.txt'\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because it appears within the type `State<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, Request<Body>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because it appears within the type `Oneshot<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, Request<Body>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because it appears within the type `RouteFutureInner<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, EmptyRouter, Body>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because it appears within the type `RouteFuture<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, EmptyRouter, Body>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because it appears within the type `H2StreamState<RouteFuture<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, EmptyRouter, Body>, BoxBody<Bytes, Error>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required because it appears within the type `H2Stream<RouteFuture<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, EmptyRouter>, EmptyRouter, Body>, BoxBody<Bytes, Error>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `hyper::common::exec::Exec` to implement `hyper::common::exec::ConnStreamExec<RouteFuture<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter, axum::body::Body>, http_body::combinators::box_body::BoxBody<axum::body::Bytes, axum::Error>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `hyper::server::server::Builder::<I, E>::serve`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/qinjianquan/.cargo/registry/src/mirrors.tuna.tsinghua.edu.cn-df7c3c540f42cdbd/hyper-0.14.24/src/server/server.rs:558:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m558\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        E: ConnStreamExec<<S::Service as HttpService<Body>>::Future, B>,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `Builder::<I, E>::serve`\u001b[0m\n\n"}
{"message":"the trait bound `hyper::common::exec::Exec: hyper::common::exec::ConnStreamExec<RouteFuture<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter, axum::body::Body>, http_body::combinators::box_body::BoxBody<axum::body::Bytes, axum::Error>>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":"the trait `hyper::common::exec::ConnStreamExec<RouteFuture<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter, axum::body::Body>, http_body::combinators::box_body::BoxBody<axum::body::Bytes, axum::Error>>` is not implemented for `hyper::common::exec::Exec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":false,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `hyper::common::exec::ConnStreamExec<F, B>` is implemented for `hyper::common::exec::Exec`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `IntoFuture`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the `.await`","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":false,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `hyper::common::exec::Exec: hyper::common::exec::ConnStreamExec<RouteFuture<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter, axum::body::Body>, http_body::combinators::box_body::BoxBody<axum::body::Bytes, axum::Error>>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:30:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `hyper::common::exec::ConnStreamExec<RouteFuture<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter, axum::body::Body>, http_body::combinators::box_body::BoxBody<axum::body::Bytes, axum::Error>>` is not implemented for `hyper::common::exec::Exec`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: remove the `.await`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `hyper::common::exec::ConnStreamExec<F, B>` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1mhyper::common::exec::Exec\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `Future`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `IntoFuture`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'\u001b[0m\n\n"}
{"message":"the trait bound `hyper::common::exec::Exec: hyper::common::exec::NewSvcExec<hyper::server::tcp::addr_stream::AddrStream, MakeRouteServiceFuture<Route<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter>>, Route<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter>, hyper::common::exec::Exec, hyper::server::server::NoopWatcher>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":"the trait `hyper::common::exec::NewSvcExec<hyper::server::tcp::addr_stream::AddrStream, MakeRouteServiceFuture<Route<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter>>, Route<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter>, hyper::common::exec::Exec, hyper::server::server::NoopWatcher>` is not implemented for `hyper::common::exec::Exec`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":false,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `hyper::common::exec::NewSvcExec<I, N, S, E, W>` is implemented for `hyper::common::exec::Exec`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `IntoFuture`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the `.await`","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":false,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `hyper::common::exec::Exec: hyper::common::exec::NewSvcExec<hyper::server::tcp::addr_stream::AddrStream, MakeRouteServiceFuture<Route<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter>>, Route<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter>, hyper::common::exec::Exec, hyper::server::server::NoopWatcher>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:30:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `hyper::common::exec::NewSvcExec<hyper::server::tcp::addr_stream::AddrStream, MakeRouteServiceFuture<Route<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter>>, Route<axum::handler::OnMethod<fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}, axum::body::Body, _, EmptyRouter>, EmptyRouter>, hyper::common::exec::Exec, hyper::server::server::NoopWatcher>` is not implemented for `hyper::common::exec::Exec`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: remove the `.await`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `hyper::common::exec::NewSvcExec<I, N, S, E, W>` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1mhyper::common::exec::Exec\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `Future`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `IntoFuture`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'\u001b[0m\n\n"}
{"message":"the trait bound `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}: Handler<axum::body::Body, _>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":"the trait `Handler<axum::body::Body, _>` is not implemented for fn item `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":false,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Handler<ReqBody, T>` is implemented for `axum::handler::Layered<S, T>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, ...>` to implement `tower_service::Service<Request<axum::body::Body>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-6444039446795897019.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"1 redundant requirement hidden","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Route<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, ...>> {generate}, ..., ..., ...>, ...>` to implement `tower_service::Service<Request<axum::body::Body>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-6859453702477890084.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Route<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, ...>> {generate}, ..., ..., ...>, ...>` to implement `hyper::service::http::HttpService<axum::body::Body>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-6859453702477890084.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `IntoMakeService<Route<OnMethod<fn(Path<Params>) -> impl Future<Output = ...> {generate}, ..., ..., ...>, ...>>` to implement `hyper::service::make::MakeServiceRef<hyper::server::tcp::addr_stream::AddrStream, axum::body::Body>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-11089421339671716781.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `Future`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `IntoFuture`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the `.await`","code":null,"level":"help","spans":[{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":true,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":{"span":{"file_name":"src/main.rs","byte_start":664,"byte_end":670,"line_start":30,"line_end":30,"column_start":9,"column_end":15,"is_primary":false,"text":[{"text":"        .await","highlight_start":9,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `await` expression","def_site_span":{"file_name":"src/main.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}: Handler<axum::body::Body, _>` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/main.rs:30:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .await\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Handler<axum::body::Body, _>` is not implemented for fn item `fn(axum::extract::Path<Params>) -> impl Future<Output = Result<std::string::String, StatusCode>> {generate}`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: remove the `.await`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the trait `Handler<ReqBody, T>` \u001b[0m\u001b[0m\u001b[1mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1maxum::handler::Layered<S, T>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, StatusCode>> {generate}, Body, _, ...>` to implement `tower_service::Service<Request<axum::body::Body>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-6444039446795897019.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: 1 redundant requirement hidden\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Route<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, ...>> {generate}, ..., ..., ...>, ...>` to implement `tower_service::Service<Request<axum::body::Body>>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-6859453702477890084.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Route<OnMethod<fn(Path<Params>) -> impl Future<Output = Result<String, ...>> {generate}, ..., ..., ...>, ...>` to implement `hyper::service::http::HttpService<axum::body::Body>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-6859453702477890084.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `IntoMakeService<Route<OnMethod<fn(Path<Params>) -> impl Future<Output = ...> {generate}, ..., ..., ...>, ...>>` to implement `hyper::service::make::MakeServiceRef<hyper::server::tcp::addr_stream::AddrStream, axum::body::Body>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-11089421339671716781.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `Future`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: required for `Server<AddrIncoming, IntoMakeService<Route<OnMethod<fn(Path<Params>) -> ... {generate}, ..., ..., ...>, ...>>>` to implement `IntoFuture`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: the full type name has been written to '/Users/qinjianquan/Career/rust-updating/from-principle-to-practice/src/thumbor/target/debug/deps/thumbor-1d6ce2ba3d2ffd95.long-type-90054488442767584.txt'\u001b[0m\n\n"}
{"message":"aborting due to 6 previous errors; 2 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors; 2 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0277`.\u001b[0m\n"}
